name: Pull Request CI

on:
  push:
    branches:
      - "main"
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - auto_merge_enabled

env:
  NODE_VERSION: "22"

permissions:
  checks: write
  contents: write
  pull-requests: write
  models: read

jobs:
  packages:
    name: Packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: ./pnpm-lock.yaml
      - run: pnpm install
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [packages]
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: ./pnpm-lock.yaml
      - run: pnpm install
      - run: pnpm run build
        env:
          NODE_ENV: production
      - name: Check and commit dist
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if [[ -n $(git status --porcelain dist/index.mjs) ]]; then
            git add dist/index.mjs
            git commit -m "chore: update dist/index.mjs"
            git pull --rebase origin ${{ github.head_ref || github.ref_name }}
            git push origin HEAD:${{ github.head_ref || github.ref_name }}
          fi
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [packages]
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: ./pnpm-lock.yaml
      - run: pnpm install
      - uses: actions/cache@v4
        with:
          path: node_modules/.cache/eslint
          key: ${{ runner.os }}-eslint-${{ hashFiles('eslint.config.mjs') }}
      - uses: reviewdog/action-eslint@v1
        with:
          level: error
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: "--ignore-pattern .gitignore --max-warnings=0 --cache --cache-location ./node_modules/.cache/eslint ./src"
  type_check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: [packages]
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: ./pnpm-lock.yaml
      - run: pnpm install
      - run: pnpm run type-check
  ai_agent_run:
    name: Run AI Agent action
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: ./pnpm-lock.yaml
      - run: pnpm install
      - name: Setup Memory DB
        uses: actions/cache@v4
        with:
          path: .ai-actions/memory.db
          key: |
            memory-db-${{ github.ref }}-${{ github.sha }}
            memory-db-${{ github.ref }}
            memory-db-
      - name: AI Agent action
        id: ai-agent
        uses: ./
        with:
          prompt: |
            Go to https://mazrean.com/ and check for anything unnatural.
            Report your results in Markdown format.

            When checking, pay particular attention to the following points
            - Make all page transitions.
            - If there are input forms, etc., check the input and validation behavior.
            - Check all button click behavior.
            - Pay particular attention to display corruption.
          model: "openai/gpt-4.1"
          system-prompt: |
            You are a Quality Assurance (QA) specialist.
            You are adept at identifying areas of unusual behavior from web pages and finding bugs.
            You are able to identify, without prejudice, any discomfort that users may experience when using the site.
            We can then accurately prioritize the issues we find based on the severity of their impact on the user's experience.
          mcp-config-file: ".ai-actions/mcp.json"
          memory-db-file: ".ai-actions/memory.db"
      - name: Check AI Agent action
        run: |
          echo "${{ steps.ai-agent.outputs.response }}" >> $GITHUB_STEP_SUMMARY
